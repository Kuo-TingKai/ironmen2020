#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.26
#  in conjunction with Tcl version 8.6
#    Sep 21, 2020 11:27:44 AM CST  platform: Windows NT

import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import gp3_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    gp3_support.set_Tk_var()
    top = mainlevel (root)
    gp3_support.init(root, top)
    root.mainloop()

w = None
def create_mainlevel(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = tk.Toplevel (root)
    gp3_support.set_Tk_var()
    top = mainlevel (w)
    gp3_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_mainlevel():
    global w
    w.destroy()
    w = None

class mainlevel:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("457x381+258+209")
        top.minsize(116, 1)
        top.maxsize(1028, 750)
        top.resizable(1, 0)
        top.title("IPERF3  UX")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.lframe_Server = tk.LabelFrame(top)
        self.lframe_Server.place(relx=0.212, rely=0.0, relheight=0.197
                , relwidth=0.328)
        self.lframe_Server.configure(relief='groove')
        self.lframe_Server.configure(foreground="black")
        self.lframe_Server.configure(text='''Server Mode''')
        self.lframe_Server.configure(background="#d9d9d9")
        self.lframe_Server.configure(highlightbackground="#d9d9d9")
        self.lframe_Server.configure(highlightcolor="black")

        self.entry_srvPort = tk.Entry(self.lframe_Server)
        self.entry_srvPort.place(relx=0.66, rely=0.613, height=17, relwidth=0.293
                , bordermode='ignore')
        self.entry_srvPort.configure(background="white")
        self.entry_srvPort.configure(disabledforeground="#a3a3a3")
        self.entry_srvPort.configure(font="TkFixedFont")
        self.entry_srvPort.configure(foreground="#000000")
        self.entry_srvPort.configure(highlightbackground="#d9d9d9")
        self.entry_srvPort.configure(highlightcolor="black")
        self.entry_srvPort.configure(insertbackground="black")
        self.entry_srvPort.configure(selectbackground="#c4c4c4")
        self.entry_srvPort.configure(selectforeground="black")
        tooltip_font = "TkDefaultFont"
        ToolTip(self.entry_srvPort, tooltip_font, '''"Server port number must match with client port"''', delay=0.5)

        self.entry_srvInterval = tk.Entry(self.lframe_Server)
        self.entry_srvInterval.place(relx=0.667, rely=0.307, height=17
                , relwidth=0.293, bordermode='ignore')
        self.entry_srvInterval.configure(background="white")
        self.entry_srvInterval.configure(disabledforeground="#a3a3a3")
        self.entry_srvInterval.configure(font="TkFixedFont")
        self.entry_srvInterval.configure(foreground="#000000")
        self.entry_srvInterval.configure(highlightbackground="#d9d9d9")
        self.entry_srvInterval.configure(highlightcolor="black")
        self.entry_srvInterval.configure(insertbackground="black")
        self.entry_srvInterval.configure(selectbackground="#c4c4c4")
        self.entry_srvInterval.configure(selectforeground="black")

        self.chk_srvinterval = tk.Checkbutton(self.lframe_Server)
        self.chk_srvinterval.place(relx=0.067, rely=0.267, relheight=0.347
                , relwidth=0.567, bordermode='ignore')
        self.chk_srvinterval.configure(activebackground="#ececec")
        self.chk_srvinterval.configure(activeforeground="#000000")
        self.chk_srvinterval.configure(background="#d9d9d9")
        self.chk_srvinterval.configure(disabledforeground="#a3a3a3")
        self.chk_srvinterval.configure(foreground="#000000")
        self.chk_srvinterval.configure(highlightbackground="#d9d9d9")
        self.chk_srvinterval.configure(highlightcolor="black")
        self.chk_srvinterval.configure(justify='left')
        self.chk_srvinterval.configure(text='''Interval (s)''')
        self.chk_srvinterval.configure(variable=gp3_support.che59)

        self.chk_srvPort = tk.Checkbutton(self.lframe_Server)
        self.chk_srvPort.place(relx=0.04, rely=0.573, relheight=0.347
                , relwidth=0.413, bordermode='ignore')
        self.chk_srvPort.configure(activebackground="#ececec")
        self.chk_srvPort.configure(activeforeground="#000000")
        self.chk_srvPort.configure(background="#d9d9d9")
        self.chk_srvPort.configure(disabledforeground="#a3a3a3")
        self.chk_srvPort.configure(foreground="#000000")
        self.chk_srvPort.configure(highlightbackground="#d9d9d9")
        self.chk_srvPort.configure(highlightcolor="black")
        self.chk_srvPort.configure(justify='left')
        self.chk_srvPort.configure(text='''Port''')
        self.chk_srvPort.configure(variable=gp3_support.che50)

        self.lframe_ClientMode = tk.LabelFrame(top)
        self.lframe_ClientMode.place(relx=0.013, rely=0.199, relheight=0.669
                , relwidth=0.394)
        self.lframe_ClientMode.configure(relief='groove')
        self.lframe_ClientMode.configure(foreground="black")
        self.lframe_ClientMode.configure(text='''Client Mode''')
        self.lframe_ClientMode.configure(background="#d9d9d9")
        self.lframe_ClientMode.configure(highlightbackground="#d9d9d9")
        self.lframe_ClientMode.configure(highlightcolor="black")

        self.label_IP = tk.Label(self.lframe_ClientMode)
        self.label_IP.place(relx=0.017, rely=0.078, height=22, width=67
                , bordermode='ignore')
        self.label_IP.configure(activebackground="#f9f9f9")
        self.label_IP.configure(activeforeground="black")
        self.label_IP.configure(background="#d9d9d9")
        self.label_IP.configure(disabledforeground="#a3a3a3")
        self.label_IP.configure(foreground="#000000")
        self.label_IP.configure(highlightbackground="#d9d9d9")
        self.label_IP.configure(highlightcolor="black")
        self.label_IP.configure(text='''IP address''')

        self.entry_ipaddr = tk.Entry(self.lframe_ClientMode)
        self.entry_ipaddr.place(relx=0.411, rely=0.082, height=17, relwidth=0.522
                , bordermode='ignore')
        self.entry_ipaddr.configure(background="white")
        self.entry_ipaddr.configure(disabledforeground="#a3a3a3")
        self.entry_ipaddr.configure(font="-family {細明體} -size 8")
        self.entry_ipaddr.configure(foreground="#000000")
        self.entry_ipaddr.configure(highlightbackground="#d9d9d9")
        self.entry_ipaddr.configure(highlightcolor="black")
        self.entry_ipaddr.configure(insertbackground="black")
        self.entry_ipaddr.configure(selectbackground="#c4c4c4")
        self.entry_ipaddr.configure(selectforeground="black")

        self.chk_clientInterval = tk.Checkbutton(self.lframe_ClientMode)
        self.chk_clientInterval.place(relx=0.017, rely=0.161, relheight=0.102
                , relwidth=0.511, bordermode='ignore')
        self.chk_clientInterval.configure(activebackground="#ececec")
        self.chk_clientInterval.configure(activeforeground="#000000")
        self.chk_clientInterval.configure(background="#d9d9d9")
        self.chk_clientInterval.configure(disabledforeground="#a3a3a3")
        self.chk_clientInterval.configure(foreground="#000000")
        self.chk_clientInterval.configure(highlightbackground="#d9d9d9")
        self.chk_clientInterval.configure(highlightcolor="black")
        self.chk_clientInterval.configure(justify='left')
        self.chk_clientInterval.configure(state='disabled')
        self.chk_clientInterval.configure(text='''Interval (s)''')
        self.chk_clientInterval.configure(variable=gp3_support.che47)

        self.entry_cInterval = tk.Entry(self.lframe_ClientMode)
        self.entry_cInterval.place(relx=0.578, rely=0.173, height=17
                , relwidth=0.356, bordermode='ignore')
        self.entry_cInterval.configure(background="white")
        self.entry_cInterval.configure(disabledforeground="#a3a3a3")
        self.entry_cInterval.configure(font="TkFixedFont")
        self.entry_cInterval.configure(foreground="#000000")
        self.entry_cInterval.configure(highlightbackground="#d9d9d9")
        self.entry_cInterval.configure(highlightcolor="black")
        self.entry_cInterval.configure(insertbackground="black")
        self.entry_cInterval.configure(selectbackground="#c4c4c4")
        self.entry_cInterval.configure(selectforeground="black")

        self.chk_cListenedPort = tk.Checkbutton(self.lframe_ClientMode)
        self.chk_cListenedPort.place(relx=0.028, rely=0.235, relheight=0.102
                , relwidth=0.283, bordermode='ignore')
        self.chk_cListenedPort.configure(activebackground="#ececec")
        self.chk_cListenedPort.configure(activeforeground="#000000")
        self.chk_cListenedPort.configure(background="#d9d9d9")
        self.chk_cListenedPort.configure(disabledforeground="#a3a3a3")
        self.chk_cListenedPort.configure(foreground="#000000")
        self.chk_cListenedPort.configure(highlightbackground="#d9d9d9")
        self.chk_cListenedPort.configure(highlightcolor="black")
        self.chk_cListenedPort.configure(justify='left')
        self.chk_cListenedPort.configure(text='''Port''')
        self.chk_cListenedPort.configure(variable=gp3_support.che49)

        self.entry_cListenedPort = tk.Entry(self.lframe_ClientMode)
        self.entry_cListenedPort.place(relx=0.583, rely=0.259, height=17
                , relwidth=0.356, bordermode='ignore')
        self.entry_cListenedPort.configure(background="white")
        self.entry_cListenedPort.configure(disabledforeground="#a3a3a3")
        self.entry_cListenedPort.configure(font="TkFixedFont")
        self.entry_cListenedPort.configure(foreground="#000000")
        self.entry_cListenedPort.configure(highlightbackground="#d9d9d9")
        self.entry_cListenedPort.configure(highlightcolor="black")
        self.entry_cListenedPort.configure(insertbackground="black")
        self.entry_cListenedPort.configure(selectbackground="#c4c4c4")
        self.entry_cListenedPort.configure(selectforeground="black")
        tooltip_font = "TkDefaultFont"
        ToolTip(self.entry_cListenedPort, tooltip_font, '''"Client port number must match with server port"''', delay=0.5)

        self.chk_testDuration = tk.Checkbutton(self.lframe_ClientMode)
        self.chk_testDuration.place(relx=0.017, rely=0.318, relheight=0.102
                , relwidth=0.55, bordermode='ignore')
        self.chk_testDuration.configure(activebackground="#ececec")
        self.chk_testDuration.configure(activeforeground="#000000")
        self.chk_testDuration.configure(background="#d9d9d9")
        self.chk_testDuration.configure(disabledforeground="#a3a3a3")
        self.chk_testDuration.configure(foreground="#000000")
        self.chk_testDuration.configure(highlightbackground="#d9d9d9")
        self.chk_testDuration.configure(highlightcolor="black")
        self.chk_testDuration.configure(justify='left')
        self.chk_testDuration.configure(text='''Test time (s)''')
        self.chk_testDuration.configure(variable=gp3_support.che51)

        self.entry_testTime = tk.Entry(self.lframe_ClientMode)
        self.entry_testTime.place(relx=0.578, rely=0.349, height=17
                , relwidth=0.356, bordermode='ignore')
        self.entry_testTime.configure(background="white")
        self.entry_testTime.configure(disabledforeground="#a3a3a3")
        self.entry_testTime.configure(font="TkFixedFont")
        self.entry_testTime.configure(foreground="#000000")
        self.entry_testTime.configure(highlightbackground="#d9d9d9")
        self.entry_testTime.configure(highlightcolor="black")
        self.entry_testTime.configure(insertbackground="black")
        self.entry_testTime.configure(selectbackground="#c4c4c4")
        self.entry_testTime.configure(selectforeground="black")

        self.chk_numOfParallelClient = tk.Checkbutton(self.lframe_ClientMode)
        self.chk_numOfParallelClient.place(relx=0.056, rely=0.404
                , relheight=0.102, relwidth=0.9, bordermode='ignore')
        self.chk_numOfParallelClient.configure(activebackground="#ececec")
        self.chk_numOfParallelClient.configure(activeforeground="#000000")
        self.chk_numOfParallelClient.configure(background="#d9d9d9")
        self.chk_numOfParallelClient.configure(disabledforeground="#a3a3a3")
        self.chk_numOfParallelClient.configure(foreground="#000000")
        self.chk_numOfParallelClient.configure(highlightbackground="#d9d9d9")
        self.chk_numOfParallelClient.configure(highlightcolor="black")
        self.chk_numOfParallelClient.configure(justify='left')
        self.chk_numOfParallelClient.configure(text='''Number of  Parallel Client''')
        self.chk_numOfParallelClient.configure(variable=gp3_support.che53)

        self.entry_numOfParallelClient = tk.Entry(self.lframe_ClientMode)
        self.entry_numOfParallelClient.place(relx=0.15, rely=0.502, height=17
                , relwidth=0.467, bordermode='ignore')
        self.entry_numOfParallelClient.configure(background="white")
        self.entry_numOfParallelClient.configure(disabledforeground="#a3a3a3")
        self.entry_numOfParallelClient.configure(font="TkFixedFont")
        self.entry_numOfParallelClient.configure(foreground="#000000")
        self.entry_numOfParallelClient.configure(highlightbackground="#d9d9d9")
        self.entry_numOfParallelClient.configure(highlightcolor="black")
        self.entry_numOfParallelClient.configure(insertbackground="black")
        self.entry_numOfParallelClient.configure(selectbackground="#c4c4c4")
        self.entry_numOfParallelClient.configure(selectforeground="black")

        self.chk_enableUDP = tk.Checkbutton(self.lframe_ClientMode)
        self.chk_enableUDP.place(relx=0.028, rely=0.569, relheight=0.102
                , relwidth=0.511, bordermode='ignore')
        self.chk_enableUDP.configure(activebackground="#ececec")
        self.chk_enableUDP.configure(activeforeground="#000000")
        self.chk_enableUDP.configure(background="#d9d9d9")
        self.chk_enableUDP.configure(disabledforeground="#a3a3a3")
        self.chk_enableUDP.configure(foreground="#000000")
        self.chk_enableUDP.configure(highlightbackground="#d9d9d9")
        self.chk_enableUDP.configure(highlightcolor="black")
        self.chk_enableUDP.configure(justify='left')
        self.chk_enableUDP.configure(text='''Enable UDP''')
        self.chk_enableUDP.configure(variable=gp3_support.che56)

        self.chk_bandwidth = tk.Checkbutton(self.lframe_ClientMode)
        self.chk_bandwidth.place(relx=0.028, rely=0.651, relheight=0.102
                , relwidth=0.511, bordermode='ignore')
        self.chk_bandwidth.configure(activebackground="#ececec")
        self.chk_bandwidth.configure(activeforeground="#000000")
        self.chk_bandwidth.configure(background="#d9d9d9")
        self.chk_bandwidth.configure(disabledforeground="#a3a3a3")
        self.chk_bandwidth.configure(foreground="#000000")
        self.chk_bandwidth.configure(highlightbackground="#d9d9d9")
        self.chk_bandwidth.configure(highlightcolor="black")
        self.chk_bandwidth.configure(justify='left')
        self.chk_bandwidth.configure(text='''BandWidth''')
        self.chk_bandwidth.configure(variable=gp3_support.che63)

        self.entry_bw = tk.Entry(self.lframe_ClientMode)
        self.entry_bw.place(relx=0.156, rely=0.737, height=17, relwidth=0.356
                , bordermode='ignore')
        self.entry_bw.configure(background="white")
        self.entry_bw.configure(disabledforeground="#a3a3a3")
        self.entry_bw.configure(font="TkFixedFont")
        self.entry_bw.configure(foreground="#000000")
        self.entry_bw.configure(highlightbackground="#d9d9d9")
        self.entry_bw.configure(highlightcolor="black")
        self.entry_bw.configure(insertbackground="black")
        self.entry_bw.configure(selectbackground="#c4c4c4")
        self.entry_bw.configure(selectforeground="black")

        self.combox_rate1 = ttk.Combobox(self.lframe_ClientMode)
        self.combox_rate1.place(relx=0.556, rely=0.718, relheight=0.086
                , relwidth=0.294, bordermode='ignore')
        self.value_list = ['KB','MB',]
        self.combox_rate1.configure(values=self.value_list)
        self.combox_rate1.configure(takefocus="")

        self.chk_windowSize = tk.Checkbutton(self.lframe_ClientMode)
        self.chk_windowSize.place(relx=0.028, rely=0.804, relheight=0.102
                , relwidth=0.567, bordermode='ignore')
        self.chk_windowSize.configure(activebackground="#ececec")
        self.chk_windowSize.configure(activeforeground="#000000")
        self.chk_windowSize.configure(background="#d9d9d9")
        self.chk_windowSize.configure(disabledforeground="#a3a3a3")
        self.chk_windowSize.configure(foreground="#000000")
        self.chk_windowSize.configure(highlightbackground="#d9d9d9")
        self.chk_windowSize.configure(highlightcolor="black")
        self.chk_windowSize.configure(justify='left')
        self.chk_windowSize.configure(text='''Window Size''')
        self.chk_windowSize.configure(variable=gp3_support.che68)

        self.entry_windowSize = tk.Entry(self.lframe_ClientMode)
        self.entry_windowSize.place(relx=0.156, rely=0.89, height=17
                , relwidth=0.356, bordermode='ignore')
        self.entry_windowSize.configure(background="white")
        self.entry_windowSize.configure(disabledforeground="#a3a3a3")
        self.entry_windowSize.configure(font="TkFixedFont")
        self.entry_windowSize.configure(foreground="#000000")
        self.entry_windowSize.configure(highlightbackground="#d9d9d9")
        self.entry_windowSize.configure(highlightcolor="black")
        self.entry_windowSize.configure(insertbackground="black")
        self.entry_windowSize.configure(selectbackground="#c4c4c4")
        self.entry_windowSize.configure(selectforeground="black")

        self.TCombobox1 = ttk.Combobox(self.lframe_ClientMode)
        self.TCombobox1.place(relx=0.556, rely=0.886, relheight=0.086
                , relwidth=0.294, bordermode='ignore')
        self.value_list = ['KB','MB',]
        self.TCombobox1.configure(values=self.value_list)
        self.TCombobox1.configure(takefocus="")

        self.btn_Start = tk.Button(top)
        self.btn_Start.place(relx=0.788, rely=0.026, height=66, width=78)
        self.btn_Start.configure(activebackground="#ececec")
        self.btn_Start.configure(activeforeground="#000000")
        self.btn_Start.configure(background="#d9d9d9")
        self.btn_Start.configure(disabledforeground="#a3a3a3")
        self.btn_Start.configure(foreground="#000000")
        self.btn_Start.configure(highlightbackground="#d9d9d9")
        self.btn_Start.configure(highlightcolor="black")
        self.btn_Start.configure(pady="0")
        self.btn_Start.configure(text='''Start''')

        self.btn_Reset = tk.Button(top)
        self.btn_Reset.place(relx=0.569, rely=0.026, height=66, width=78)
        self.btn_Reset.configure(activebackground="#ececec")
        self.btn_Reset.configure(activeforeground="#000000")
        self.btn_Reset.configure(background="#d9d9d9")
        self.btn_Reset.configure(disabledforeground="#a3a3a3")
        self.btn_Reset.configure(foreground="#000000")
        self.btn_Reset.configure(highlightbackground="#d9d9d9")
        self.btn_Reset.configure(highlightcolor="black")
        self.btn_Reset.configure(pady="0")
        self.btn_Reset.configure(text='''Reset''')

        self.label_iperfCmd = tk.Label(top)
        self.label_iperfCmd.place(relx=0.0, rely=0.866, height=22, width=107)
        self.label_iperfCmd.configure(activebackground="#f9f9f9")
        self.label_iperfCmd.configure(activeforeground="black")
        self.label_iperfCmd.configure(background="#d9d9d9")
        self.label_iperfCmd.configure(disabledforeground="#a3a3a3")
        self.label_iperfCmd.configure(foreground="#000000")
        self.label_iperfCmd.configure(highlightbackground="#d9d9d9")
        self.label_iperfCmd.configure(highlightcolor="black")
        self.label_iperfCmd.configure(text='''iperf3 CMD''')

        self.entry_runCMD = tk.Entry(top)
        self.entry_runCMD.place(relx=0.015, rely=0.919, height=17
                , relwidth=0.381)
        self.entry_runCMD.configure(background="white")
        self.entry_runCMD.configure(disabledforeground="#a3a3a3")
        self.entry_runCMD.configure(font="TkFixedFont")
        self.entry_runCMD.configure(foreground="#000000")
        self.entry_runCMD.configure(highlightbackground="#d9d9d9")
        self.entry_runCMD.configure(highlightcolor="black")
        self.entry_runCMD.configure(insertbackground="black")
        self.entry_runCMD.configure(selectbackground="#c4c4c4")
        self.entry_runCMD.configure(selectforeground="black")
        self.entry_runCMD.configure(state='readonly')
        tooltip_font = "TkDefaultFont"
        ToolTip(self.entry_runCMD, tooltip_font, '''"Generate the iperf3 command automatically"''', delay=0.5)

        self.lframe_output = tk.LabelFrame(top)
        self.lframe_output.place(relx=0.416, rely=0.197, relheight=0.669
                , relwidth=0.569)
        self.lframe_output.configure(relief='flat')
        self.lframe_output.configure(foreground="black")
        self.lframe_output.configure(relief="flat")
        self.lframe_output.configure(text='''Output''')
        self.lframe_output.configure(background="#d9d9d9")
        self.lframe_output.configure(highlightbackground="#d9d9d9")
        self.lframe_output.configure(highlightcolor="black")

        self.scrolledtxt_output = ScrolledText(self.lframe_output)
        self.scrolledtxt_output.place(relx=0.015, rely=0.071, relheight=0.91
                , relwidth=0.965, bordermode='ignore')
        self.scrolledtxt_output.configure(background="white")
        self.scrolledtxt_output.configure(font="TkTextFont")
        self.scrolledtxt_output.configure(foreground="black")
        self.scrolledtxt_output.configure(highlightbackground="#d9d9d9")
        self.scrolledtxt_output.configure(highlightcolor="black")
        self.scrolledtxt_output.configure(insertbackground="black")
        self.scrolledtxt_output.configure(insertborderwidth="3")
        self.scrolledtxt_output.configure(selectbackground="#c4c4c4")
        self.scrolledtxt_output.configure(selectforeground="black")
        self.scrolledtxt_output.configure(wrap="none")

        self.btn_Close = tk.Button(top)
        self.btn_Close.place(relx=0.44, rely=0.885, height=36, width=78)
        self.btn_Close.configure(activebackground="#ececec")
        self.btn_Close.configure(activeforeground="#000000")
        self.btn_Close.configure(background="#d9d9d9")
        self.btn_Close.configure(disabledforeground="#a3a3a3")
        self.btn_Close.configure(foreground="#000000")
        self.btn_Close.configure(highlightbackground="#d9d9d9")
        self.btn_Close.configure(highlightcolor="black")
        self.btn_Close.configure(pady="0")
        self.btn_Close.configure(text='''Close''')

        self.radiobtn_server = tk.Radiobutton(top)
        self.radiobtn_server.place(relx=0.031, rely=0.026, relheight=0.068
                , relwidth=0.136)
        self.radiobtn_server.configure(activebackground="#ececec")
        self.radiobtn_server.configure(activeforeground="#000000")
        self.radiobtn_server.configure(background="#d9d9d9")
        self.radiobtn_server.configure(disabledforeground="#a3a3a3")
        self.radiobtn_server.configure(foreground="#000000")
        self.radiobtn_server.configure(highlightbackground="#d9d9d9")
        self.radiobtn_server.configure(highlightcolor="black")
        self.radiobtn_server.configure(justify='left')
        self.radiobtn_server.configure(text='''Server''')
        self.radiobtn_server.configure(value="1")
        self.radiobtn_server.configure(variable=gp3_support.selectedButton)

        self.radiobtn_client = tk.Radiobutton(top)
        self.radiobtn_client.place(relx=0.031, rely=0.105, relheight=0.068
                , relwidth=0.136)
        self.radiobtn_client.configure(activebackground="#ececec")
        self.radiobtn_client.configure(activeforeground="#000000")
        self.radiobtn_client.configure(background="#d9d9d9")
        self.radiobtn_client.configure(disabledforeground="#a3a3a3")
        self.radiobtn_client.configure(foreground="#000000")
        self.radiobtn_client.configure(highlightbackground="#d9d9d9")
        self.radiobtn_client.configure(highlightcolor="black")
        self.radiobtn_client.configure(justify='left')
        self.radiobtn_client.configure(text='''Client''')
        self.radiobtn_client.configure(value="2")
        self.radiobtn_client.configure(variable=gp3_support.selectedButton)

# ======================================================
# Modified by Rozen to remove Tkinter import statements and to receive
# the font as an argument.
# ======================================================
# Found the original code at:
# http://code.activestate.com/recipes/576688-tooltip-for-tkinter/
# ======================================================

from time import time, localtime, strftime

class ToolTip(tk.Toplevel):
    """
    Provides a ToolTip widget for Tkinter.
    To apply a ToolTip to any Tkinter widget, simply pass the widget to the
    ToolTip constructor
    """
    def __init__(self, wdgt, tooltip_font, msg=None, msgFunc=None,
                 delay=1, follow=True):
        """
        Initialize the ToolTip

        Arguments:
          wdgt: The widget this ToolTip is assigned to
          tooltip_font: Font to be used
          msg:  A static string message assigned to the ToolTip
          msgFunc: A function that retrieves a string to use as the ToolTip text
          delay:   The delay in seconds before the ToolTip appears(may be float)
          follow:  If True, the ToolTip follows motion, otherwise hides
        """
        self.wdgt = wdgt
        # The parent of the ToolTip is the parent of the ToolTips widget
        self.parent = self.wdgt.master
        # Initalise the Toplevel
        tk.Toplevel.__init__(self, self.parent, bg='black', padx=1, pady=1)
        # Hide initially
        self.withdraw()
        # The ToolTip Toplevel should have no frame or title bar
        self.overrideredirect(True)

        # The msgVar will contain the text displayed by the ToolTip
        self.msgVar = tk.StringVar()
        if msg is None:
            self.msgVar.set('No message provided')
        else:
            self.msgVar.set(msg)
        self.msgFunc = msgFunc
        self.delay = delay
        self.follow = follow
        self.visible = 0
        self.lastMotion = 0
        # The text of the ToolTip is displayed in a Message widget
        tk.Message(self, textvariable=self.msgVar, bg='#FFFFDD',
                font=tooltip_font,
                aspect=1000).grid()

        # Add bindings to the widget.  This will NOT override
        # bindings that the widget already has
        self.wdgt.bind('<Enter>', self.spawn, '+')
        self.wdgt.bind('<Leave>', self.hide, '+')
        self.wdgt.bind('<Motion>', self.move, '+')

    def spawn(self, event=None):
        """
        Spawn the ToolTip.  This simply makes the ToolTip eligible for display.
        Usually this is caused by entering the widget

        Arguments:
          event: The event that called this funciton
        """
        self.visible = 1
        # The after function takes a time argument in miliseconds
        self.after(int(self.delay * 1000), self.show)

    def show(self):
        """
        Displays the ToolTip if the time delay has been long enough
        """
        if self.visible == 1 and time() - self.lastMotion > self.delay:
            self.visible = 2
        if self.visible == 2:
            self.deiconify()

    def move(self, event):
        """
        Processes motion within the widget.
        Arguments:
          event: The event that called this function
        """
        self.lastMotion = time()
        # If the follow flag is not set, motion within the
        # widget will make the ToolTip disappear
        #
        if self.follow is False:
            self.withdraw()
            self.visible = 1

        # Offset the ToolTip 10x10 pixes southwest of the pointer
        self.geometry('+%i+%i' % (event.x_root+20, event.y_root-10))
        try:
            # Try to call the message function.  Will not change
            # the message if the message function is None or
            # the message function fails
            self.msgVar.set(self.msgFunc())
        except:
            pass
        self.after(int(self.delay * 1000), self.show)

    def hide(self, event=None):
        """
        Hides the ToolTip.  Usually this is caused by leaving the widget
        Arguments:
          event: The event that called this function
        """
        self.visible = 0
        self.withdraw()

# ===========================================================
#                   End of Class ToolTip
# ===========================================================

# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''

    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)

        #self.configure(yscrollcommand=_autoscroll(vsb),
        #    xscrollcommand=_autoscroll(hsb))
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))

        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')

        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)

        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                  | tk.Place.__dict__.keys()
        else:
            methods = tk.Pack.__dict__.keys() + tk.Grid.__dict__.keys() \
                  + tk.Place.__dict__.keys()

        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)
    return wrapped

class ScrolledText(AutoScroll, tk.Text):
    '''A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        tk.Text.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

import platform
def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))

def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')

def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1*int(event.delta/120),'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1*int(event.delta),'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')

def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1*int(event.delta/120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1*int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')

if __name__ == '__main__':
    vp_start_gui()





